ARG PHP=8.3

# Use the official PHP-FPM image
FROM php:${PHP}-fpm

# PHP modules
ARG php_require="bcmath gd mbstring pdo_mysql zip"
ARG php_suggest="exif imagick intl pcntl saxon soap"
ARG php_extra="opcache"

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    mariadb-client \
    gpg \
    supervisor \
    git \
    curl \
    unzip \
    # Unicode support for PDF
    fonts-noto-cjk-extra \
    fonts-wqy-microhei \
    fonts-wqy-zenhei \
    xfonts-wqy \
    # Install google-chrome-stable(amd64)/chromium(arm64) for PDF generation
    && if [ "$(dpkg --print-architecture)" = "amd64" ]; then \
    mkdir -p /etc/apt/keyrings \
    && curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | \
    gpg --dearmor -o /etc/apt/keyrings/google.gpg \
    && echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/google.gpg] https://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y --no-install-recommends google-chrome-stable; \
    elif [ "$(dpkg --print-architecture)" = "arm64" ]; then \
    apt-get install -y --no-install-recommends \
    chromium; \        
    fi \
    # Create config directory for chromium/google-chrome-stable
    && mkdir /var/www/.config \
    && chown www-data:www-data /var/www/.config \
    # Cleanup
    && apt-get purge -y gpg \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
COPY --from=ghcr.io/mlocati/php-extension-installer /usr/bin/install-php-extensions /usr/local/bin/

RUN install-php-extensions \
    ${php_require} \
    ${php_suggest} \
    ${php_extra}

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy the modified Invoice Ninja source code (with paywall bypass)
COPY invoiceninja/ /var/www/html/

# Set working directory
WORKDIR /var/www/html

# Verify essential files exist
RUN ls -la && \
    test -f composer.json || (echo "ERROR: composer.json not found!" && exit 1)

# Create necessary directories BEFORE composer install to avoid cache path error
RUN mkdir -p storage/framework/{sessions,views,cache} \
    && mkdir -p storage/logs \
    && mkdir -p bootstrap/cache \
    && chmod -R 775 storage bootstrap/cache \
    && chown -R www-data:www-data storage bootstrap/cache

# Install dependencies (without dev dependencies for production)
# Move preload.php temporarily to avoid autoload error
RUN if [ -f preload.php ]; then mv preload.php preload.php.bak; fi && \
    composer install --no-dev --optimize-autoloader --no-interaction && \
    if [ -f preload.php.bak ]; then mv preload.php.bak preload.php; fi

# Configure PHP
RUN ln -s "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

# Copy PHP configuration
COPY dockerfiles/debian/php/php.ini /usr/local/etc/php/conf.d/invoiceninja.ini
COPY dockerfiles/debian/php/php-fpm.conf /usr/local/etc/php-fpm.d/invoiceninja.conf

# Setup supervisor
COPY dockerfiles/debian/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Set final permissions and create remaining directories
RUN mkdir -p public/storage \
    && chown -R www-data:www-data /var/www/html \
    && find /var/www/html -type f -exec chmod 644 {} \; \
    && find /var/www/html -type d -exec chmod 755 {} \; \
    && chmod -R 775 storage bootstrap/cache

# Create storage link
RUN php artisan storage:link

# Copy initialization script
COPY dockerfiles/debian/scripts/init.sh /usr/local/bin/init.sh
RUN chmod +x /usr/local/bin/init.sh

# Verify paywall bypass is in place
RUN grep -q "return true; // Bypass white label check" /var/www/html/app/Models/Account.php && \
    echo "✓ Paywall bypass verified" || \
    (echo "✗ Paywall bypass NOT found!" && exit 1)

# Set environment variables for PDF generation
ENV SNAPPDF_CHROMIUM_PATH=/usr/bin/google-chrome-stable

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD pgrep -f "php-fpm: master process"

# Expose PHP-FPM port for Nginx Proxy Manager
EXPOSE 9000

ENTRYPOINT ["/usr/local/bin/init.sh"]
CMD ["supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]